The core classes, functions, and methods that will be necessary are:

1. `HTMLParser`: A class that inherits from `html.parser.HTMLParser` to parse the HTML file and extract articles. It will have the following methods:
   - `handle_starttag`: To handle the start of an HTML tag.
   - `handle_endtag`: To handle the end of an HTML tag.
   - `handle_data`: To handle the data inside an HTML tag.
   - `get_articles`: To return the extracted articles.

2. `generate_sql_query`: A function to generate the SQL query to insert the extracted articles into the database.

3. `main`: The main function to tie everything together. It will read the HTML file, extract the articles, generate the SQL query, and print the query.

Now, let's write the code for each file.

main.py
```python
from html_parser import HTMLParser
from sql_query_generator import generate_sql_query

def main():
    # Read the HTML file
    with open('file.html', 'r') as file:
        data = file.read()

    # Parse the HTML file and extract the articles
    parser = HTMLParser()
    parser.feed(data)
    articles = parser.get_articles()

    # Generate the SQL query
    query = generate_sql_query(articles)

    # Print the SQL query
    print(query)

if __name__ == "__main__":
    main()
```

html_parser.py
```python
from html.parser import HTMLParser as BaseHTMLParser

class HTMLParser(BaseHTMLParser):
    def __init__(self):
        super().__init__()
        self.articles = []
        self.current_tag = None
        self.current_article = {}

    def handle_starttag(self, tag, attrs):
        if tag == 'article':
            self.current_tag = tag

    def handle_endtag(self, tag):
        if tag == 'article':
            self.articles.append(self.current_article)
            self.current_article = {}
            self.current_tag = None

    def handle_data(self, data):
        if self.current_tag == 'article':
            if 'headline' not in self.current_article:
                self.current_article['headline'] = data.strip()
            else:
                self.current_article['content'] = data.strip()

    def get_articles(self):
        return self.articles
```

sql_query_generator.py
```python
def generate_sql_query(articles):
    query = "INSERT INTO articles (headline, content) VALUES "
    values = []

    for article in articles:
        headline = article['headline'].replace("'", "\\'")
        content = article['content'].replace("'", "\\'")
        values.append(f"('{headline}', '{content}')")

    query += ', '.join(values) + ';'

    return query
```

requirements.txt
```
html5lib==1.1
```

This code should be fully functional. It reads an HTML file, extracts articles (defined as the content inside `<article>` tags), generates an SQL query to insert the articles into a MySQL database, and prints the query. The SQL query is a string. The code follows Python best practices and is organized into separate files for clarity and maintainability.