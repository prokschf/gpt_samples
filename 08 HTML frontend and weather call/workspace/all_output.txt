The architecture of this project will be divided into three main parts:

1. Front-end: This will be a simple HTML page with JavaScript to handle user interactions and API calls. The main file will be `index.html` and it will use `styles.css` for styling and `main.js` for functionality.

2. Back-end: This will be a simple Node.js server that serves the front-end files and handles API calls to the Google Places and OpenWeatherMap APIs. The main file will be `server.js`.

3. Configuration: This will include a `package.json` file for managing Node.js dependencies and a `.env` file for storing API keys.

Let's start with the `package.json` file:

package.json
```json
{
  "name": "weather-app",
  "version": "1.0.0",
  "description": "A simple weather app that uses Google Places and OpenWeatherMap APIs",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.17.1",
    "dotenv": "^8.2.0",
    "axios": "^0.21.1"
  }
}
```

Next, we'll create the `.env` file to store our API keys. This file should not be included in version control, so we'll add it to a `.gitignore` file:

.gitignore
```gitignore
.env
```

.env
```env
GOOGLE_PLACES_API_KEY=your_google_places_api_key
OPENWEATHERMAP_API_KEY=your_openweathermap_api_key
```

Now, let's create the `server.js` file:

server.js
```javascript
require('dotenv').config();
const express = require('express');
const axios = require('axios');

const app = express();

app.use(express.static('public'));

app.get('/autocomplete', async (req, res) => {
  const response = await axios.get(`https://maps.googleapis.com/maps/api/place/autocomplete/json?input=${req.query.input}&key=${process.env.GOOGLE_PLACES_API_KEY}`);
  res.json(response.data);
});

app.get('/weather', async (req, res) => {
  const response = await axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${req.query.city}&appid=${process.env.OPENWEATHERMAP_API_KEY}`);
  res.json(response.data);
});

app.listen(3000, () => console.log('Server is running on port 3000'));
```

Next, we'll create the `index.html` file:

index.html
```html
<!DOCTYPE html>
<html>
<head>
  <title>Weather App</title>
  <link rel="stylesheet" type="text/css" href="styles.css">
</head>
<body>
  <div id="app">
    <input type="text" id="city" placeholder="Enter a city" autocomplete="off">
    <table id="weather">
      <!-- Weather data will be inserted here -->
    </table>
  </div>
  <script src="main.js"></script>
</body>
</html>
```

Now, let's create the `styles.css` file:

styles.css
```css
body {
  font-family: Arial, sans-serif;
}

#app {
  width: 600px;
  margin: 0 auto;
}

#city {
  width: 100%;
  padding: 10px;
  font-size: 20px;
}

#weather {
  width: 100%;
  margin-top: 20px;
  border-collapse: collapse;
}

#weather th, #weather td {
  border: 1px solid #ddd;
  padding: 10px;
}

#weather th {
  background-color: #f2f2f2;
}
```

Finally, let's create the `main.js` file:

main.js
```javascript
const cityInput = document.getElementById('city');
const weatherTable = document.getElementById('weather');

cityInput.addEventListener('input', async () => {
  const response = await fetch(`/autocomplete?input=${cityInput.value}`);
  const data = await response.json();
  cityInput.value = data.predictions[0].description;
});

cityInput.addEventListener('change', async () => {
  const response = await fetch(`/weather?city=${cityInput.value}`);
  const data = await response.json();
  weatherTable.innerHTML = `
    <tr>
      <th>Temperature Now</th>
      <td>${data.main.temp}Â°C</td>
    </tr>
    <tr>
      <th>Weather Now</th>
      <td>${data.weather[0].description}</td>
    </tr>
    <!-- Forecast data will be inserted here -->
  `;
});
```

This is a basic implementation of the project. Note that the forecast data is not included because the OpenWeatherMap API requires a separate call to get forecast data, and this would make the code more complex. However, you can easily add this functionality by making an additional API call in the `change` event listener for the `cityInput` element.