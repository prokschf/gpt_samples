The core classes, functions, and methods necessary for this project are:

1. `Calculator`: This class will be responsible for parsing the input string and performing the calculations. It will have the following methods:
    - `__init__`: Initializes the Calculator with an input string.
    - `calculate`: Parses the input string and performs the calculations.
    - `next_token`: Helper method to get the next token from the input string.
    - `parse_expression`: Helper method to parse an expression from the input string.
    - `parse_term`: Helper method to parse a term from the input string.
    - `parse_factor`: Helper method to parse a factor from the input string.
    - `parse_number`: Helper method to parse a number from the input string.
    - `parse_parentheses`: Helper method to parse parentheses from the input string.
    - `error`: Helper method to throw an error.

2. `main`: This function will be the entry point of the program. It will create a Calculator instance and call its `calculate` method.

Now, let's write the code for each file.

calculator.py
```python
class Calculator:
    def __init__(self, input_string):
        self.input_string = input_string
        self.position = 0
        self.current_token = self.next_token()

    def error(self, message):
        raise Exception(message)

    def next_token(self):
        while self.position < len(self.input_string) and self.input_string[self.position].isspace():
            self.position += 1
        if self.position >= len(self.input_string):
            return None
        if self.input_string[self.position].isdigit():
            start = self.position
            while self.position < len(self.input_string) and self.input_string[self.position].isdigit():
                self.position += 1
            return int(self.input_string[start:self.position])
        token = self.input_string[self.position]
        self.position += 1
        return token

    def parse_expression(self):
        term = self.parse_term()
        while self.current_token in ['+', '-']:
            if self.current_token == '+':
                self.current_token = self.next_token()
                term += self.parse_term()
            elif self.current_token == '-':
                self.current_token = self.next_token()
                term -= self.parse_term()
        return term

    def parse_term(self):
        factor = self.parse_factor()
        while self.current_token in ['*', '/']:
            if self.current_token == '*':
                self.current_token = self.next_token()
                factor *= self.parse_factor()
            elif self.current_token == '/':
                self.current_token = self.next_token()
                denominator = self.parse_factor()
                if denominator == 0:
                    self.error("Division by zero")
                factor /= denominator
        return factor

    def parse_factor(self):
        if self.current_token == '(':
            self.current_token = self.next_token()
            factor = self.parse_expression()
            if self.current_token != ')':
                self.error("Mismatched parentheses")
            self.current_token = self.next_token()
        elif self.current_token.isdigit():
            factor = self.parse_number()
        else:
            self.error("Invalid character")
        return factor

    def parse_number(self):
        number = self.current_token
        self.current_token = self.next_token()
        return number

    def calculate(self):
        result = self.parse_expression()
        if self.current_token is not None:
            self.error("Invalid expression")
        return result
```

main.py
```python
from calculator import Calculator

def main():
    input_string = input("Enter a mathematical expression: ")
    calculator = Calculator(input_string)
    try:
        result = calculator.calculate()
        print(f"Result: {result}")
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()
```

requirements.txt
```
# No external dependencies
```

The `calculator.py` file contains the `Calculator` class which is responsible for parsing the input string and performing the calculations. The `main.py` file is the entry point of the program. It creates a `Calculator` instance and calls its `calculate` method. The `requirements.txt` file is empty because this program does not require any external dependencies.