The core classes, functions, and methods that will be necessary are:

1. `TemperaturePredictor`: This class will encapsulate the LSTM model and its associated methods.
2. `__init__`: This method will initialize the `TemperaturePredictor` class.
3. `prepare_data`: This function will prepare the input data for training the LSTM model.
4. `train`: This method will train the LSTM model on the input data.
5. `predict`: This method will use the trained LSTM model to predict the next 20 temperatures.

The Python files that will be created are:

1. `temperature_predictor.py`: This file will contain the `TemperaturePredictor` class and its associated methods.
2. `main.py`: This file will be the entry point of the program. It will create an instance of the `TemperaturePredictor` class, train the model, and make predictions.
3. `requirements.txt`: This file will list all the Python packages that need to be installed for the program to run.

Now, let's write the code for each file.

temperature_predictor.py
```python
import numpy as np
from keras.models import Sequential
from keras.layers import LSTM, Dense

class TemperaturePredictor:
    def __init__(self, sequence):
        self.sequence = sequence
        self.model = Sequential()

    def prepare_data(self):
        X, y = [], []
        for i in range(len(self.sequence)-3):
            X.append(self.sequence[i:i+3])
            y.append(self.sequence[i+3])
        return np.array(X), np.array(y)

    def train(self):
        X, y = self.prepare_data()
        X = X.reshape((X.shape[0], X.shape[1], 1))
        self.model.add(LSTM(50, activation='relu', input_shape=(3, 1)))
        self.model.add(Dense(1))
        self.model.compile(optimizer='adam', loss='mse')
        self.model.fit(X, y, epochs=200, verbose=0)

    def predict(self):
        predictions = []
        input_seq = self.sequence[-3:]
        for _ in range(20):
            input_seq = input_seq.reshape((1, len(input_seq), 1))
            prediction = self.model.predict(input_seq, verbose=0)
            predictions.append(prediction[0][0])
            input_seq = np.append(input_seq[0][1:], prediction)
        return predictions
```

main.py
```python
from temperature_predictor import TemperaturePredictor

def main():
    sequence = [25, 26, 27, 26, 24, 21]
    predictor = TemperaturePredictor(sequence)
    predictor.train()
    predictions = predictor.predict()
    print(predictions)

if __name__ == "__main__":
    main()
```

requirements.txt
```
numpy==1.19.5
tensorflow==2.4.1
```

To run the program, first install the required packages with `pip install -r requirements.txt`, then run `python main.py`.