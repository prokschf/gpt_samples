The architecture will be divided into several parts:

1. Terraform scripts for infrastructure setup.
2. GitHub Actions workflows for the backend and frontend.
3. Dockerfiles for the backend, frontend, and Fluentd sidecar.

Let's start with the Terraform scripts.

**main.tf**

This is the entry point for Terraform. It will call modules to create the EKS cluster, RDS instance, and necessary IAM roles.

```hcl
provider "aws" {
  region = "us-west-2"
}

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "2.77.0"

  name = "my-vpc"
  cidr = "10.0.0.0/16"

  azs             = ["us-west-2a", "us-west-2b"]
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24"]
  public_subnets  = ["10.0.101.0/24", "10.0.102.0/24"]

  enable_nat_gateway = true
  enable_vpn_gateway = true
}

module "eks" {
  source  = "terraform-aws-modules/eks/aws"
  version = "17.1.0"

  cluster_name    = "my-eks-cluster"
  cluster_version = "1.20"
  subnets         = module.vpc.private_subnets

  node_groups = {
    eks_nodes = {
      desired_capacity = 2
      max_capacity     = 2
      min_capacity     = 1

      instance_type = "t3.medium"
      key_name      = "my-key"
    }
  }
}

module "rds" {
  source  = "terraform-aws-modules/rds/aws"
  version = "2.23.0"

  identifier = "mypostgres"

  engine            = "postgres"
  engine_version    = "11.9"
  instance_class    = "db.t2.micro"
  allocated_storage = 20

  name     = "mydb"
  username = "foo"
  password = "foobarbaz"
  port     = "5432"

  vpc_security_group_ids = [aws_security_group.default.id]
  maintenance_window     = "Mon:00:00-Mon:03:00"
  backup_window          = "03:00-06:00"
  multi_az               = false
  storage_encrypted      = true
  deletion_protection    = false
}

output "cluster_endpoint" {
  description = "Endpoint for EKS control plane."
  value       = module.eks.cluster_endpoint
}

output "cluster_security_group_id" {
  description = "Security group ID attached to the EKS cluster."
  value       = module.eks.cluster_security_group_id
}

output "cluster_iam_role_name" {
  description = "IAM role name associated with EKS cluster."
  value       = module.eks.cluster_iam_role_name
}

output "cluster_certificate_authority_data" {
  description = "Nested attribute containing certificate-authority-data for your cluster."
  value       = module.eks.cluster_certificate_authority_data
}
```

**GitHub Actions workflows**

We will have two workflows, one for the backend and one for the frontend. They will build the Docker images and push them to a Docker registry.

**.github/workflows/backend.yml**

```yaml
name: Backend CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: your-dockerhub-username/backend:latest
```

**.github/workflows/frontend.yml**

```yaml
name: Frontend CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to DockerHub
      uses: docker/login-action@v1 
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: your-dockerhub-username/frontend:latest
```

**Dockerfiles**

We will have three Dockerfiles, one for the backend, one for the frontend, and one for the Fluentd sidecar.

**Dockerfile.backend**

```dockerfile
FROM python:3.8-slim-buster

WORKDIR /app

COPY requirements.txt requirements.txt
RUN pip3 install -r requirements.txt

COPY . .

CMD [ "python3", "-m" , "flask", "run", "--host=0.0.0.0"]
```

**Dockerfile.frontend**

```dockerfile
FROM node:14

WORKDIR /app

COPY package*.json ./

RUN npm install

COPY . .

EXPOSE 3000

CMD [ "npm", "start" ]
```

**Dockerfile.fluentd**

```dockerfile
FROM fluent/fluentd:v1.11-debian-1

USER root

RUN ["gem", "install", "fluent-plugin-elasticsearch", "--no-document", "--version", "4.0.7"]

COPY fluent.conf /fluentd/etc/

USER fluent
```

**fluent.conf**

```xml
<source>
  @type forward
  port 24224
  bind 0.0.0.0
</source>

<match *.**>
  @type copy

  <store>
    @type elasticsearch
    host elasticsearch
    port 9200
    logstash_format true
    logstash_prefix fluentd
    logstash_dateformat %Y%m%d
    include_tag_key true
    tag_key @log_name
    flush_interval 1s
  </store>

  <store>
    @type stdout
  </store>
</match>
```

This architecture covers the creation of the EKS cluster, RDS instance, and necessary IAM roles using Terraform, the CI/CD pipelines for the backend and frontend using GitHub Actions, and the Dockerfiles for the backend, frontend, and Fluentd sidecar.